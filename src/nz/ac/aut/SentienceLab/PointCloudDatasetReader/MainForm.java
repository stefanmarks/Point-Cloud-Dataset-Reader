package nz.ac.aut.SentienceLab.PointCloudDatasetReader;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/**
 *
 * @author Stefan Marks
 */
public class MainForm extends javax.swing.JFrame
{
    /**
     * Creates new form MainForm
     */
    public MainForm()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        javax.swing.JPanel pnlMain = new javax.swing.JPanel();
        pnlSettings = new javax.swing.JPanel();
        javax.swing.JLabel lblSource = new javax.swing.JLabel();
        txtSource = new javax.swing.JTextField();
        btnSource = new javax.swing.JButton();
        javax.swing.JLabel lblType = new javax.swing.JLabel();
        cbxType = new javax.swing.JComboBox<>();
        javax.swing.JLabel lblDestination = new javax.swing.JLabel();
        txtDestination = new javax.swing.JTextField();
        btnDestination = new javax.swing.JButton();
        javax.swing.JPanel pnlButtons = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        prgConverting = new javax.swing.JProgressBar();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnlMain.setLayout(new java.awt.BorderLayout(0, 10));

        pnlSettings.setLayout(new java.awt.GridBagLayout());

        lblSource.setText("Source:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        pnlSettings.add(lblSource, gridBagConstraints);

        txtSource.setText(".\\input.csv");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlSettings.add(txtSource, gridBagConstraints);

        btnSource.setText("...");
        btnSource.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSourceActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        pnlSettings.add(btnSource, gridBagConstraints);

        lblType.setText("Source Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        pnlSettings.add(lblType, gridBagConstraints);

        cbxType.setModel(new DefaultComboBoxModel(new DataSource[] { new DataSource_XYZRGB(), new DataSource_OBJ() }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pnlSettings.add(cbxType, gridBagConstraints);

        lblDestination.setText("Destination:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        pnlSettings.add(lblDestination, gridBagConstraints);

        txtDestination.setText(".\\output.bytes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        pnlSettings.add(txtDestination, gridBagConstraints);

        btnDestination.setText("...");
        btnDestination.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDestinationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        pnlSettings.add(btnDestination, gridBagConstraints);

        pnlMain.add(pnlSettings, java.awt.BorderLayout.CENTER);

        pnlButtons.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        btnStart.setText("Start Conversion");
        btnStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnStartActionPerformed(evt);
            }
        });
        pnlButtons.add(btnStart);

        prgConverting.setEnabled(false);
        prgConverting.setStringPainted(true);
        pnlButtons.add(prgConverting);

        pnlMain.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStartActionPerformed
    {//GEN-HEADEREND:event_btnStartActionPerformed
        if ( converter != null && converter.isRunning() )
        {
            converter.stop();
        }
        else
        {
            converter       = new Converter();
            converterThread = new Thread(converter);
            converterThread.start();
        }        
    }//GEN-LAST:event_btnStartActionPerformed

    
    private void btnDestinationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDestinationActionPerformed
    {//GEN-HEADEREND:event_btnDestinationActionPerformed
        File file = new File(txtDestination.getText());
        JFileChooser fc = new JFileChooser(file.getParent());
        fc.setMultiSelectionEnabled(false);
        fc.setDialogTitle("Select Destination File");
        fc.setSelectedFile(file);
        int choice = fc.showSaveDialog(this);
        if ( choice == JFileChooser.APPROVE_OPTION )
        {
            txtDestination.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_btnDestinationActionPerformed

    
    private void btnSourceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSourceActionPerformed
    {//GEN-HEADEREND:event_btnSourceActionPerformed
        File file = new File(txtSource.getText());
        JFileChooser fc = new JFileChooser(file.getParent());
        fc.setMultiSelectionEnabled(false);
        fc.setDialogTitle("Select Source File");
        fc.setSelectedFile(file);
        int choice = fc.showOpenDialog(this);
        if ( choice == JFileChooser.APPROVE_OPTION )
        {
            String filename = fc.getSelectedFile().toString();
            txtSource.setText(filename);
            filename = filename.replace(".csv", ".bytes");
            txtDestination.setText(filename);
        }
    }//GEN-LAST:event_btnSourceActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDestination;
    private javax.swing.JButton btnSource;
    private javax.swing.JButton btnStart;
    private javax.swing.JComboBox<String> cbxType;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JProgressBar prgConverting;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JTextField txtSource;
    // End of variables declaration//GEN-END:variables

    
    private class Converter implements Runnable
    {
        @Override
        public void run()
        {
            if ( !execute )
            {
                execute = true;
                initialise();
                
                DataSource ds = (DataSource) cbxType.getSelectedItem();
                List<PointData> pointList = new ArrayList<>();
                if ( ds.openSource(new File(txtSource.getText())) )
                {
                    PointData p = null;    
                    do
                    {
                        try
                        {
                            p = ds.readSource();
                            if ( p != null)
                            {
                                pointList.add(p);
                                prgConverting.setString("" + pointList.size());
                            }
                        }
                        catch (IOException | ParseException e)
                        {
                            System.err.println(e);
                            execute = false;
                        }
                    }
                    while ( execute && (p != null) );
                }
                else
                {
                    execute = false;
                }

                if ( execute )
                {
                    prgConverting.setIndeterminate(false);
                    prgConverting.setValue(0);

                    try
                    {
                        FileChannel chn = new FileOutputStream(txtDestination.getText()).getChannel();
                        ByteBuffer  buf = ByteBuffer.allocate(PointData.SIZE * 2);
                        buf.order(ByteOrder.LITTLE_ENDIAN);
                        
                        // store point count
                        buf.putInt(pointList.size());
                        
                        int index      = 0;
                        int oldPercent = -1;
                        for (PointData point : pointList) 
                        {
                            point.serialise(buf);
                            buf.flip();
                            chn.write(buf);
                            buf.rewind();
                            index++;
                            int percent = index * 100 / pointList.size();
                            if (percent != oldPercent)
                            {
                                oldPercent = percent;
                                prgConverting.setString(index + "/" + pointList.size() + "(" + percent + "%)");
                                prgConverting.setValue(percent);
                            }
                        }

                        chn.close();
                    }
                    catch (IOException e)
                    {
                        System.err.println(e);
                        execute = false;
                    }
                    prgConverting.setValue(0);
                    prgConverting.setIndeterminate(true);
                    prgConverting.setString("");
                }
                
                terminate();
            }
        }

        
        private void initialise()
        {
            pnlSettings.setEnabled(false);
            btnStart.setText("Cancel");
            prgConverting.setEnabled(true);
            prgConverting.setString("");
            prgConverting.setIndeterminate(true);
        }
        
        
        private void terminate()
        {
            pnlSettings.setEnabled(true);
            btnStart.setText("Start Conversion");
            prgConverting.setEnabled(false);
            prgConverting.setString("");
            prgConverting.setIndeterminate(false);
        }
        
        
        public boolean isRunning()
        {
            return execute;
        }                    
        
        
        public void stop()
        {
            execute = false;
        }
        
        private volatile boolean execute;
    }
    
    private Thread    converterThread;
    private Converter converter;
}
